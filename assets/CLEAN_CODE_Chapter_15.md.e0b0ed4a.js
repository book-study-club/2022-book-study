import{_ as n,c as s,o as a,a as t}from"./app.7b36c640.js";const m='{"title":"Chapter 15 - JUnit","description":"","frontmatter":{},"headers":[{"level":3,"title":"\uC811\uB450\uC5B4 \uC81C\uAC70","slug":"\uC811\uB450\uC5B4-\uC81C\uAC70"},{"level":3,"title":"\uC870\uAC74\uBB38 \uCEA1\uC290\uD654","slug":"\uC870\uAC74\uBB38-\uCEA1\uC290\uD654"},{"level":3,"title":"\uBA85\uD655\uD55C \uC758\uBBF8\uC758 \uB2E8\uC5B4\uB97C \uC0AC\uC6A9\uD574\uB77C","slug":"\uBA85\uD655\uD55C-\uC758\uBBF8\uC758-\uB2E8\uC5B4\uB97C-\uC0AC\uC6A9\uD574\uB77C"},{"level":3,"title":"\uBD80\uC815\uBB38\uBCF4\uB2E4\uB294 \uAE0D\uC815\uBB38\uC744 \uC0AC\uC6A9\uD558\uC790","slug":"\uBD80\uC815\uBB38\uBCF4\uB2E4\uB294-\uAE0D\uC815\uBB38\uC744-\uC0AC\uC6A9\uD558\uC790"},{"level":3,"title":"\uD568\uC218\uB97C \uBD84\uB9AC\uD574\uB77C","slug":"\uD568\uC218\uB97C-\uBD84\uB9AC\uD574\uB77C"},{"level":3,"title":"\uD568\uC218 \uC0AC\uC6A9\uC740 \uC77C\uAD00\uC801\uC73C\uB85C","slug":"\uD568\uC218-\uC0AC\uC6A9\uC740-\uC77C\uAD00\uC801\uC73C\uB85C"},{"level":3,"title":"\uC228\uACA8\uC9C4 \uC2DC\uAC04\uC801\uC778 \uACB0\uD569","slug":"\uC228\uACA8\uC9C4-\uC2DC\uAC04\uC801\uC778-\uACB0\uD569"},{"level":3,"title":"\uC77C\uAD00\uC801\uC778 \uBC29\uC2DD","slug":"\uC77C\uAD00\uC801\uC778-\uBC29\uC2DD"},{"level":3,"title":"\uCD5C\uC885\uCF54\uB4DC","slug":"\uCD5C\uC885\uCF54\uB4DC"}],"relativePath":"CLEAN_CODE/Chapter_15.md"}',p={},o=t(`<h1 id="chapter-15-junit" tabindex="-1">Chapter 15 - JUnit <a class="header-anchor" href="#chapter-15-junit" aria-hidden="true">#</a></h1><p>JUnit\uC740 \uC790\uBC14\uC758 \uC720\uBA85\uD55C \uD504\uB808\uC784\uC6CC\uD06C\uC774\uB2E4. \uC774 \uC7A5\uC5D0\uC11C\uB294 JUnit \uD504\uB808\uC784\uC6CC\uD06C\uC5D0\uC11C \uAC00\uC838\uC628 \uCF54\uB4DC\uB97C \uD3C9\uAC00\uD55C\uB2E4.</p><p>\uC6B0\uB9AC\uAC00 \uC0B4\uD3B4\uBCFC \uBAA8\uB4C8\uC740 \uBB38\uC790\uC5F4 \uBE44\uAD50 \uC624\uB958\uB97C \uD30C\uC545\uD560 \uB54C \uC720\uC6A9\uD55C \uCF54\uB4DC\uB2E4. ComparisonCompactor\uB77C\uB294 \uBAA8\uB4C8\uB85C, \uB450 \uBB38\uC790\uC5F4\uC744 \uBC1B\uC544 \uCC28\uC774\uB97C \uBC18\uD658\uD55C\uB2E4. \uC608\uB97C \uB4E4\uC5B4, ABCDE\uC640 ABXDE\uB97C \uBC1B\uC544 &lt;\u2026B[X]D\u2026&gt;\uB97C \uBC18\uD658\uD55C\uB2E4.</p><div class="language-java"><pre><code><span class="token keyword">package</span> <span class="token namespace">junit<span class="token punctuation">.</span>tests<span class="token punctuation">.</span>framework</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">junit<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span><span class="token class-name">ComparisonCompactor</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">junit<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span><span class="token class-name">TestCase</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComparisonCompactorTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> failure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComparisonCompactor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token string">&quot;a expected:&lt;[b]&gt; but was:&lt;[c]&gt;&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>failure<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testStartSame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> failure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComparisonCompactor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;ba&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;expected:&lt;b[a]&gt; but was:&lt;b[c]&gt;&quot;</span><span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testEndSame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> failure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComparisonCompactor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;ab&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;expected:&lt;[a]b&gt; but was:&lt;[c]b&gt;&quot;</span><span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> failure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComparisonCompactor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;ab&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ab&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;expected:&lt;ab&gt; but was:&lt;ab&gt;&quot;</span><span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testNoContextStartAndEndSame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> failure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComparisonCompactor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;adc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;expected:&lt;...[b]...&gt; but was:&lt;...[d]...&gt;&quot;</span><span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testStartAndEndContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> failure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComparisonCompactor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;adc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;expected:&lt;a[b]c&gt; but was:&lt;a[d]c&gt;&quot;</span><span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testStartAndEndContextWithEllipses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> failure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComparisonCompactor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;abcde&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abfde&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;expected:&lt;...b[c]d...&gt; but was:&lt;...b[f]d...&gt;&quot;</span><span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testComparisonErrorStartSameComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> failure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComparisonCompactor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;ab&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;expected:&lt;ab[]&gt; but was:&lt;ab[c]&gt;&quot;</span><span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testComparisonErrorEndSameComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> failure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComparisonCompactor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;bc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;expected:&lt;[]...&gt; but was:&lt;[a]...&gt;&quot;</span><span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testComparisonErrorEndSameCompleteContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> failure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComparisonCompactor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;bc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;expected:&lt;[]bc&gt; but was:&lt;[a]bc&gt;&quot;</span><span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testComparisonErrorOverlappingMatches</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> failure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComparisonCompactor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abbc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;expected:&lt;...[]...&gt; but was:&lt;...[b]...&gt;&quot;</span><span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testComparisonErrorOverlappingMatchesContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> failure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComparisonCompactor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abbc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;expected:&lt;ab[]c&gt; but was:&lt;ab[b]c&gt;&quot;</span><span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testComparisonErrorOverlappingMatches2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> failure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComparisonCompactor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;abcdde&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abcde&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;expected:&lt;...[d]...&gt; but was:&lt;...[]...&gt;&quot;</span><span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testComparisonErrorOverlappingMatches2Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> failure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComparisonCompactor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;abcdde&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abcde&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;expected:&lt;...cd[d]e&gt; but was:&lt;...cd[]e&gt;&quot;</span><span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testComparisonErrorWithActualNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> failure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComparisonCompactor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;expected:&lt;a&gt; but was:&lt;null&gt;&quot;</span><span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testComparisonErrorWithActualNullContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> failure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComparisonCompactor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;expected:&lt;a&gt; but was:&lt;null&gt;&quot;</span><span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testComparisonErrorWithExpectedNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> failure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComparisonCompactor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;expected:&lt;null&gt; but was:&lt;a&gt;&quot;</span><span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testComparisonErrorWithExpectedNullContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> failure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComparisonCompactor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;expected:&lt;null&gt; but was:&lt;a&gt;&quot;</span><span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBug609972</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> failure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComparisonCompactor</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;S&amp;P500&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;expected:&lt;[S&amp;P50]0&gt; but was:&lt;[]0&gt;&quot;</span><span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><p>\uC704 \uD14C\uC2A4\uD2B8 \uCF00\uC774\uC2A4\uB85C ComparisionCompactor \uBAA8\uB4C8\uC5D0 \uB300\uD55C \uCF54\uB4DC \uCEE4\uBC84\uB9AC\uC9C0 \uBD84\uC11D\uC744 \uC218\uD589\uD588\uB354\uB2C8 100%\uAC00 \uB098\uC654\uB2E4. \uD14C\uC2A4\uD2B8 \uCF00\uC774\uC2A4\uAC00 \uBAA8\uB4E0 \uD589, \uBAA8\uB4E0 if \uBB38, \uBAA8\uB4E0 for \uBB38\uC744 \uC2E4\uD589\uD55C\uB2E4\uB294 \uC758\uBBF8\uB2E4.</p><p>\uB2E4\uC74C\uC740 ComparisonCompactor \uBAA8\uB4C8\uC774\uB2E4.</p><div class="language-java"><pre><code><span class="token keyword">package</span> <span class="token namespace">junit<span class="token punctuation">.</span>framework</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComparisonCompactor</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ELLIPSIS <span class="token operator">=</span> <span class="token string">&quot;...&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DELTA_END <span class="token operator">=</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DELTA_START <span class="token operator">=</span> <span class="token string">&quot;[&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> fContextLength<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> fExpected<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> fActual<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> fPrefix<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> fSuffix<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ComparisonCompactor</span><span class="token punctuation">(</span><span class="token keyword">int</span> contextLength<span class="token punctuation">,</span> <span class="token class-name">String</span> expected<span class="token punctuation">,</span> <span class="token class-name">String</span> actual<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fContextLength <span class="token operator">=</span> contextLength<span class="token punctuation">;</span>
        fExpected <span class="token operator">=</span> expected<span class="token punctuation">;</span>
        fActual <span class="token operator">=</span> actual<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">compact</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fExpected <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> fActual <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">areStringsEqual</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> fExpected<span class="token punctuation">,</span> fActual<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token function">findCommonPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">findCommonSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> expected <span class="token operator">=</span> <span class="token function">compactString</span><span class="token punctuation">(</span>fExpected<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> actual <span class="token operator">=</span> <span class="token function">compactString</span><span class="token punctuation">(</span>fActual<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> expected<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">compactString</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> result <span class="token operator">=</span> DELTA_START <span class="token operator">+</span> source<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>fPrefix<span class="token punctuation">,</span> source<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> fSuffix <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> DELTA_END<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fPrefix <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> <span class="token function">computeCommonPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fSuffix <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> result <span class="token operator">+</span> <span class="token function">computeCommonSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">findCommonPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fPrefix <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>fExpected<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fActual<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> fPrefix <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> fPrefix<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>fExpected<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>fPrefix<span class="token punctuation">)</span> <span class="token operator">!=</span> fActual<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>fPrefix<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">findCommonSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> expectedSuffix <span class="token operator">=</span> fExpected<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> actualSuffix <span class="token operator">=</span> fActual<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> actualSuffix <span class="token operator">&gt;=</span> fPrefix <span class="token operator">&amp;&amp;</span> expectedSuffix <span class="token operator">&gt;=</span> fPrefix<span class="token punctuation">;</span> actualSuffix<span class="token operator">--</span><span class="token punctuation">,</span> expectedSuffix<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>fExpected<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>expectedSuffix<span class="token punctuation">)</span> <span class="token operator">!=</span> fActual<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>actualSuffix<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        fSuffix <span class="token operator">=</span> fExpected<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> expectedSuffix<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">computeCommonPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>fPrefix <span class="token operator">&gt;</span> fContextLength <span class="token operator">?</span> ELLIPSIS <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> fExpected<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> fPrefix <span class="token operator">-</span> fContextLength<span class="token punctuation">)</span><span class="token punctuation">,</span> fPrefix<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">computeCommonSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>fExpected<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> fSuffix <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> fContextLength<span class="token punctuation">,</span> fExpected<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> fExpected<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>fExpected<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> fSuffix <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>fExpected<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> fSuffix <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> fExpected<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> fContextLength <span class="token operator">?</span> ELLIPSIS <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">areStringsEqual</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> fExpected<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>fActual<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\uAE34 \uD45C\uD604\uC2DD \uBA87 \uAC1C\uC640 \uC774\uC0C1\uD55C +1 \uB4F1\uC774 \uB208\uC5D0 \uB744\uC9C0\uB9CC, \uC804\uBC18\uC801\uC73C\uB85C \uC0C1\uB2F9\uD788 \uD6CC\uB8E1\uD55C \uBAA8\uB4C8\uC774\uB2E4. \uBA87\uAC00\uC9C0\uB97C \uAC1C\uC120\uD574\uBCF4\uB3C4\uB85D \uD558\uACA0\uB2E4.</p><h3 id="\uC811\uB450\uC5B4-\uC81C\uAC70" tabindex="-1">\uC811\uB450\uC5B4 \uC81C\uAC70 <a class="header-anchor" href="#\uC811\uB450\uC5B4-\uC81C\uAC70" aria-hidden="true">#</a></h3><p>\uAC00\uC7A5 \uBA3C\uC800 \uB208\uC5D0 \uAC70\uC2AC\uB9AC\uB294 \uBD80\uBD84\uC740 \uBA64\uBC84 \uBCC0\uC218 \uC55E\uC5D0 \uBD99\uC778 \uC811\uB450\uC5B4 f\uB2E4. \uC774\uCC98\uB7FC \uBCC0\uC218 \uC774\uB984\uC5D0 \uBC94\uC704\uB97C \uBA85\uC2DC\uD560 \uD544\uC694\uAC00 \uC5C6\uB2E4. \uC774\uB7F0 \uC911\uBCF5\uB418\uB294 \uC815\uBCF4\uC778 f\uB294 \uC81C\uAC70\uD560 \uD544\uC694\uAC00 \uC788\uB2E4.</p><div class="language-java"><pre><code><span class="token keyword">private</span> <span class="token keyword">int</span> contextLength<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> expected<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> actual<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> prefix<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> suffix<span class="token punctuation">;</span>
</code></pre></div><h3 id="\uC870\uAC74\uBB38-\uCEA1\uC290\uD654" tabindex="-1">\uC870\uAC74\uBB38 \uCEA1\uC290\uD654 <a class="header-anchor" href="#\uC870\uAC74\uBB38-\uCEA1\uC290\uD654" aria-hidden="true">#</a></h3><div class="language-java"><pre><code><span class="token comment">// \uAC1C\uC120\uC804</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">compact</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>expected <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> actual <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">areStringsEqual</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> expected<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">findCommonPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">findCommonSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> expected <span class="token operator">=</span> <span class="token function">compactString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> actual <span class="token operator">=</span> <span class="token function">compactString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> expected<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \uAC1C\uC120\uD6C4</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">compact</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldNotCompact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> expected<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">findCommonPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">findCommonSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> expected <span class="token operator">=</span> <span class="token function">compactString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> actual <span class="token operator">=</span> <span class="token function">compactString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> expected<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">shouldNotCompact</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> expected <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> actual <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">areStringsEqual</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\uBA85\uD655\uD55C-\uC758\uBBF8\uC758-\uB2E8\uC5B4\uB97C-\uC0AC\uC6A9\uD574\uB77C" tabindex="-1">\uBA85\uD655\uD55C \uC758\uBBF8\uC758 \uB2E8\uC5B4\uB97C \uC0AC\uC6A9\uD574\uB77C <a class="header-anchor" href="#\uBA85\uD655\uD55C-\uC758\uBBF8\uC758-\uB2E8\uC5B4\uB97C-\uC0AC\uC6A9\uD574\uB77C" aria-hidden="true">#</a></h3><div class="language-java"><pre><code><span class="token class-name">String</span> compactExpected <span class="token operator">=</span> <span class="token function">compactString</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> compactActual <span class="token operator">=</span> <span class="token function">compactString</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="\uBD80\uC815\uBB38\uBCF4\uB2E4\uB294-\uAE0D\uC815\uBB38\uC744-\uC0AC\uC6A9\uD558\uC790" tabindex="-1">\uBD80\uC815\uBB38\uBCF4\uB2E4\uB294 \uAE0D\uC815\uBB38\uC744 \uC0AC\uC6A9\uD558\uC790 <a class="header-anchor" href="#\uBD80\uC815\uBB38\uBCF4\uB2E4\uB294-\uAE0D\uC815\uBB38\uC744-\uC0AC\uC6A9\uD558\uC790" aria-hidden="true">#</a></h3><p>\uBD80\uC815\uBB38\uC740 \uAE0D\uC815\uBB38\uBCF4\uB2E4 \uC774\uD574\uD558\uAE30 \uC5B4\uB835\uB2E4.</p><div class="language-java"><pre><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">compact</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">canBeCompacted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">findCommonPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">findCommonSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> compactExpected <span class="token operator">=</span> <span class="token function">compactString</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> compactActual <span class="token operator">=</span> <span class="token function">compactString</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> compactExpected<span class="token punctuation">,</span> compactActual<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> expected<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">canBeCompacted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> expected <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> actual <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">areStringsEqual</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\uD568\uC218\uB97C-\uBD84\uB9AC\uD574\uB77C" tabindex="-1">\uD568\uC218\uB97C \uBD84\uB9AC\uD574\uB77C <a class="header-anchor" href="#\uD568\uC218\uB97C-\uBD84\uB9AC\uD574\uB77C" aria-hidden="true">#</a></h3><div class="language-java"><pre><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> compactExpected<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> compactActual<span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">formatCompactedComparison</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">canBeCompacted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">compactExpectedAndActual</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> compactExpected<span class="token punctuation">,</span> compactActual<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> expected<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token function">compactExpectedAndActual</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">findCommonPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">findCommonSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    compactExpected <span class="token operator">=</span> <span class="token function">compactString</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>
    compactActual <span class="token operator">=</span> <span class="token function">compactString</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\uD568\uC218-\uC0AC\uC6A9\uC740-\uC77C\uAD00\uC801\uC73C\uB85C" tabindex="-1">\uD568\uC218 \uC0AC\uC6A9\uC740 \uC77C\uAD00\uC801\uC73C\uB85C <a class="header-anchor" href="#\uD568\uC218-\uC0AC\uC6A9\uC740-\uC77C\uAD00\uC801\uC73C\uB85C" aria-hidden="true">#</a></h3><div class="language-java"><pre><code><span class="token keyword">private</span> <span class="token function">compactExpectedAndActual</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    prefixIndex <span class="token operator">=</span> <span class="token function">findCommonPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    suffixIndex <span class="token operator">=</span> <span class="token function">findCommonSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> compactExpected <span class="token operator">=</span> <span class="token function">compactString</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> compactActual <span class="token operator">=</span> <span class="token function">compactString</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">findCommonPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> prefixIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>expected<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> actual<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> prefixIndex <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> prefixIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>expected<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>prefixIndex<span class="token punctuation">)</span> <span class="token operator">!=</span> actual<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>prefixIndex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> prefixIndex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">findCommonSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> expectedSuffix <span class="token operator">=</span> expected<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> actualSuffix <span class="token operator">=</span> actual<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> actualSuffix <span class="token operator">&gt;=</span> prefixIndex <span class="token operator">&amp;&amp;</span> expectedSuffix <span class="token operator">&gt;=</span> prefix<span class="token punctuation">;</span> actualSuffix<span class="token operator">--</span><span class="token punctuation">,</span> expectedSuffix<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>expected<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>expectedSuffix<span class="token punctuation">)</span> <span class="token operator">!=</span> actual<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>actualSuffix<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> expected<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> expectedSuffix<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\uC228\uACA8\uC9C4-\uC2DC\uAC04\uC801\uC778-\uACB0\uD569" tabindex="-1">\uC228\uACA8\uC9C4 \uC2DC\uAC04\uC801\uC778 \uACB0\uD569 <a class="header-anchor" href="#\uC228\uACA8\uC9C4-\uC2DC\uAC04\uC801\uC778-\uACB0\uD569" aria-hidden="true">#</a></h3><p>findCommandSuffix\uB294 findCommonPrefix\uAC00 prefixIndex\uB97C \uACC4\uC0B0\uD55C\uB2E4\uB294 \uC0AC\uC2E4\uC5D0 \uC758\uC874\uD55C\uB2E4. \uB9CC\uC57D findCommonPrefix\uC640 findCommonSuffix\uB97C \uC798\uBABB\uB3C4\uB2C8 \uC21C\uC11C\uB85C \uD638\uCD9C\uD558\uBA74 \uACE0\uC0DD\uC880 \uD574\uC57C\uD560 \uAC83\uC774\uB2E4. \uADF8\uB798\uC11C \uC2DC\uAC04 \uACB0\uD569\uC744 \uC678\uBD80\uC5D0 \uB178\uCD9C\uD558\uACE0\uC790 findCommonSuffix\uB97C \uACE0\uCCD0 prefixIndex\uB97C \uC778\uC218\uB85C \uB118\uACBC\uB2E4.</p><div class="language-java"><pre><code><span class="token keyword">private</span> <span class="token function">compactExpectedAndActual</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    prefixIndex <span class="token operator">=</span> <span class="token function">findCommonPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    suffixIndex <span class="token operator">=</span> <span class="token function">findCommonSuffix</span><span class="token punctuation">(</span>prefixIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> compactExpected <span class="token operator">=</span> <span class="token function">compactString</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> compactActual <span class="token operator">=</span> <span class="token function">compactString</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">findCommonSuffix</span><span class="token punctuation">(</span><span class="token keyword">int</span> prefixIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> expectedSuffix <span class="token operator">=</span> expected<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> actualSuffix <span class="token operator">=</span> actual<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> actualSuffix <span class="token operator">&gt;=</span> prefixIndex <span class="token operator">&amp;&amp;</span> expectedSuffix <span class="token operator">&gt;=</span> prefix<span class="token punctuation">;</span> actualSuffix<span class="token operator">--</span><span class="token punctuation">,</span> expectedSuffix<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>expected<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>expectedSuffix<span class="token punctuation">)</span> <span class="token operator">!=</span> actual<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>actualSuffix<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> expected<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> expectedSuffix<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\uC77C\uAD00\uC801\uC778-\uBC29\uC2DD" tabindex="-1">\uC77C\uAD00\uC801\uC778 \uBC29\uC2DD <a class="header-anchor" href="#\uC77C\uAD00\uC801\uC778-\uBC29\uC2DD" aria-hidden="true">#</a></h3><p>\uD568\uC218 \uD638\uCD9C \uC21C\uC11C\uB294 \uD655\uC2E4\uD788 \uC815\uD574\uC9C0\uC9C0\uB9CC prefixIndex\uAC00 \uD544\uC694\uD55C \uC774\uC720\uB294 \uC124\uBA85\uD558\uC9C0 \uBABB\uD55C\uB2E4. prefixIndex\uAC00 \uD544\uC694\uD55C \uC774\uC720\uAC00 \uBD84\uBA85\uD788 \uB4E4\uC5B4\uB098\uC9C0 \uC54A\uC73C\uBBC0\uB85C \uB2E4\uB978 \uD504\uB85C\uADF8\uB798\uBA38\uAC00 \uC6D0\uB798\uB300\uB85C \uB3CC\uB824\uB193\uC744 \uC218\uB3C4 \uC788\uB2E4.</p><div class="language-java"><pre><code><span class="token keyword">private</span> <span class="token function">compactExpectedAndActual</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">findCommonPrefixAndSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> compactExpected <span class="token operator">=</span> <span class="token function">compactString</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> compactActual <span class="token operator">=</span> <span class="token function">compactString</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">findCommonPrefixAndSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">findCommonPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> expectedSuffix <span class="token operator">=</span> expected<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> actualSuffix <span class="token operator">=</span> actual<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> actualSuffix <span class="token operator">&gt;=</span> prefixIndex <span class="token operator">&amp;&amp;</span> expectedSuffix <span class="token operator">&gt;=</span> prefix<span class="token punctuation">;</span> actualSuffix<span class="token operator">--</span><span class="token punctuation">,</span> expectedSuffix<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>expected<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>expectedSuffix<span class="token punctuation">)</span> <span class="token operator">!=</span> actual<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>actualSuffix<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    suffixIndex <span class="token operator">=</span> expected<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> expectedSuffix<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">findCommonPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> prefixIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>expected<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> actual<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> prefixIndex <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> prefixIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>expected<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>prefixIndex<span class="token punctuation">)</span> <span class="token operator">!=</span> actual<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>prefixIndex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\uB2E4\uC74C\uC73C\uB85C \uC9C0\uC800\uBD84\uD55C PrefixAndSuffix \uD568\uC218\uB3C4 \uC815\uB9AC\uD574\uBCF4\uC790.</p><div class="language-java"><pre><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">findCommonPrefixAndSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">findCommonPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> suffixLength <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token function">suffixOverlapsPrefix</span><span class="token punctuation">(</span>suffixLength<span class="token punctuation">)</span><span class="token punctuation">;</span> suffixLength<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">charFromEnd</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> suffixLength<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">charFromEnd</span><span class="token punctuation">(</span>actual<span class="token punctuation">,</span> suffixLength<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    suffixIndex <span class="token operator">=</span> suffixLength<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">char</span> <span class="token function">charFromEnd</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">suffixOverlapsPrefix</span><span class="token punctuation">(</span><span class="token keyword">int</span> suffixLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> actual<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> suffixLength <span class="token operator">&lt;</span> prefixLength <span class="token operator">||</span> expected<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> suffixLength <span class="token operator">&lt;</span> prefixLength<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\uCF54\uB4DC\uAC00 \uD6E8\uC52C \uB098\uC544\uC84C\uB2E4. \uCF54\uB4DC\uB97C \uACE0\uCE58\uACE0 \uB098\uB2C8\uAE4C suffixIndex\uAC00 \uC2E4\uC81C\uB85C\uB294 \uC811\uBBF8\uC5B4 \uAE38\uC774\uB77C\uB294 \uC0AC\uC2E4\uC774 \uB4DC\uB7EC\uB09C\uB2E4. prefixIndex\uB3C4 \uB9C8\uCC2C\uAC00\uC9C0\uB85C, \uC774 \uACBD\uC6B0 index\uC640 length\uAC00 \uB3D9\uC758\uC5B4\uB2E4. \uC2E4\uC81C\uB85C suffixIndex\uB294 0\uC5D0\uC11C \uC2DC\uC791\uD558\uC9C0 \uC54A\uB294\uB2E4. 1\uC5D0\uC11C \uC2DC\uC791\uD558\uBBC0\uB85C \uC9C4\uC815\uD55C \uAE38\uC774\uAC00 \uC544\uB2C8\uB2E4. computeCommonSuffix\uC5D0 +1\uC774 \uACF3\uACF3\uC5D0 \uB4F1\uC7A5\uD558\uB294 \uC774\uC720\uAC00 \uC5EC\uAE30\uC5D0 \uC788\uB2E4.</p><div class="language-java"><pre><code><span class="token comment">// \uC911\uAC04 \uCF54\uB4DC</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComparisonCompactor</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> suffixLength<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">findCommonPrefixAndSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">findCommonPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        suffixLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token function">suffixOverlapsPrefix</span><span class="token punctuation">(</span>suffixLength<span class="token punctuation">)</span><span class="token punctuation">;</span> suffixLength<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">charFromEnd</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> suffixLength<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">charFromEnd</span><span class="token punctuation">(</span>actual<span class="token punctuation">,</span> suffixLength<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">char</span> <span class="token function">charFromEnd</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">suffixOverlapsPrefix</span><span class="token punctuation">(</span><span class="token keyword">int</span> suffixLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> actual<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> suffixLength <span class="token operator">&lt;=</span> prefixLength <span class="token operator">||</span> expected<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> suffixLength <span class="token operator">&lt;=</span> prefixLength<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">compactString</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> result <span class="token operator">=</span> DELTA_START <span class="token operator">+</span> source<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>prefixLength<span class="token punctuation">,</span> source<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> suffixLength<span class="token punctuation">)</span> <span class="token operator">+</span> DELTA_END<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>prefixLength <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> <span class="token function">computeCommonPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>suffixLength <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> result <span class="token operator">+</span> <span class="token function">computeCommonSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">computeCommonSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>expected<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> suffixLength <span class="token operator">+</span> contextLength<span class="token punctuation">,</span> expected<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> expected<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>expected<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> suffixLength<span class="token punctuation">,</span> end<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>expected<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> suffixLength <span class="token operator">&lt;</span> expected<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> contextLength <span class="token operator">?</span> ELLIPSIS <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>computeCommonSuffix\uC5D0\uC11C +1\uC744 \uC5C6\uC560\uACE0 charFromEnd\uC5D0 -1\uC744 \uCD94\uAC00\uD558\uACE0 suffixOverlapsPrefix\uC5D0 &lt;=\uB97C \uC0AC\uC6A9\uD588\uB2E4. \uADF8 \uB2E4\uC74C suffixIndex\uB97C suffixLength\uB85C \uBC14\uAFB8\uC5C8\uB2E4.</p><p>\uADF8\uB7F0\uB370 \uBB38\uC81C\uAC00 \uD558\uB098 \uC788\uB2E4. +1\uC744 \uC81C\uAC70\uD558\uB294 \uC911 compactString\uC5D0\uC11C \uB2E4\uC74C \uD589\uC744 \uBC1C\uACAC\uD588\uB2E4.</p><div class="language-java"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span>suffixLength <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre></div><p>suffixLength\uAC00 \uC774\uC81C 1\uC529 \uAC10\uC18C\uD588\uC73C\uBBC0\uB85C \uB2F9\uC5F0\uD788 &gt; \uC5F0\uC0B0\uC790\uB97C &gt;= \uC5F0\uC0B0\uC790\uB85C \uACE0\uCCD0\uC57C \uB9C8\uB545\uD558\uB2E4. \uD558\uC9C0\uB9CC &gt;= \uC5F0\uC0B0\uC790\uB294 \uB9D0\uC774 \uC548\uB418\uBBC0\uB85C \uADF8\uB300\uB85C &gt; \uC5F0\uC0B0\uC790\uAC00 \uB9DE\uB2E4! \uC989 \uC6D0\uB798 \uCF54\uB4DC\uAC00 \uD2C0\uB838\uC73C\uBA70 \uD544\uACBD \uBC84\uADF8\uB77C\uB294 \uB9D0\uC774\uB2E4. \uC544\uB2C8, \uC5C4\uBC00\uD558\uAC8C \uBC84\uADF8\uB294 \uC544\uB2C8\uB2E4. \uCF54\uB4DC\uB97C \uC880 \uB354 \uBD84\uC11D\uD574 \uBCF4\uBA74 \uC774\uC81C if \uBB38\uC740 \uAE38\uC774\uAC00 0\uC778 \uC811\uBBF8\uC5B4\uB97C \uAC78\uB7EC\uB0B4 \uCCA8\uBD80\uD558\uC9C0 \uC54A\uB294\uB2E4. \uC6D0\uB798 \uCF54\uB4DC\uB294 \uC5B8\uC81C\uB098 suffixIndex\uAC00 1 \uC774\uC0C1\uC774\uC5C8\uC73C\uBBC0\uB85C if \uBB38\uC774 \uBB34\uC758\uBBF8 \uD588\uB2E4.</p><p>\uD544\uC694\uC5C6\uB294 if\uBB38\uC744 \uC81C\uAC70\uD55C \uD6C4, compactString \uAD6C\uC870\uB97C \uB2E4\uB4EC\uC5B4\uBCF4\uC790.</p><div class="language-java"><pre><code><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">compactString</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
					<span class="token function">computeCommonPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">D</span>
					ELTA_START <span class="token operator">+</span>
					source<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>prefixLength<span class="token punctuation">,</span> source<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> suffixLength<span class="token punctuation">)</span> <span class="token operator">+</span>
					DELTA_END <span class="token operator">+</span>
					<span class="token function">computeCommonSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h3 id="\uCD5C\uC885\uCF54\uB4DC" tabindex="-1">\uCD5C\uC885\uCF54\uB4DC <a class="header-anchor" href="#\uCD5C\uC885\uCF54\uB4DC" aria-hidden="true">#</a></h3><div class="language-java"><pre><code><span class="token keyword">package</span> <span class="token namespace">junit<span class="token punctuation">.</span>framework</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComparisonCompactor</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ELLIPSIS <span class="token operator">=</span> <span class="token string">&quot;...&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DELTA_END <span class="token operator">=</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DELTA_START <span class="token operator">=</span> <span class="token string">&quot;[&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> contextLength<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> expected<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> actual<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> prefixLength<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> suffixLength<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ComparisonCompactor</span><span class="token punctuation">(</span><span class="token keyword">int</span> contextLength<span class="token punctuation">,</span> <span class="token class-name">String</span> expected<span class="token punctuation">,</span> <span class="token class-name">String</span> actual<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>contextLength <span class="token operator">=</span> contextLength<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>expected <span class="token operator">=</span> expected<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>actual <span class="token operator">=</span> actual<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">formatCompactedComparison</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> compactExpected <span class="token operator">=</span> expected<span class="token punctuation">;</span>
        <span class="token class-name">String</span> compactactual <span class="token operator">=</span> actual<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldBeCompacted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">findCommonPrefixAndSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            compactExpected <span class="token operator">=</span> <span class="token function">comapct</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>
            compactActual <span class="token operator">=</span> <span class="token function">comapct</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> compactExpected<span class="token punctuation">,</span> compactActual<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">shouldBeCompacted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">shouldNotBeCompacted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">shouldNotBeCompacted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> expected <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> actual <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> expected<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">findCommonPrefixAndSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">findCommonPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        suffixLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token function">suffixOverlapsPrefix</span><span class="token punctuation">(</span>suffixLength<span class="token punctuation">)</span><span class="token punctuation">;</span> suffixLength<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">charFromEnd</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> suffixLength<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">charFromEnd</span><span class="token punctuation">(</span>actual<span class="token punctuation">,</span> suffixLength<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">suffixOverlapsPrefix</span><span class="token punctuation">(</span><span class="token keyword">int</span> suffixLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> actual<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> suffixLength <span class="token operator">&lt;=</span> prefixLength <span class="token operator">||</span> expected<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> suffixLength <span class="token operator">&lt;=</span> prefixLength<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">findCommonPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> prefixIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>expected<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> actual<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> prefixLength <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> prefixLength<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>expected<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>prefixLength<span class="token punctuation">)</span> <span class="token operator">!=</span> actual<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>prefixLength<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">compact</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">startingEllipsis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">startingContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>DELTA_START<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">delta</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>DELTA_END<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">endingContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">endingEllipsis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">startingEllipsis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        prefixIndex <span class="token operator">&gt;</span> contextLength <span class="token operator">?</span> ELLIPSIS <span class="token operator">:</span> <span class="token string">&quot;&quot;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">startingContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> contextStart <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> prefixLength <span class="token operator">=</span> contextLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> contextEnd <span class="token operator">=</span> prefixLength<span class="token punctuation">;</span>
        <span class="token keyword">return</span> expected<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>contextStart<span class="token punctuation">,</span> contextEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">delta</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> deltaStart <span class="token operator">=</span> prefixLength<span class="token punctuation">;</span>
        <span class="token keyword">int</span> deltaend <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> suffixLength<span class="token punctuation">;</span>
        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>deltaStart<span class="token punctuation">,</span> deltaEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">endingContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> contextStart <span class="token operator">=</span> expected<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> suffixLength<span class="token punctuation">;</span>
        <span class="token keyword">int</span> contextEnd <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>contextStart <span class="token operator">+</span> contextLength<span class="token punctuation">,</span> expected<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> expected<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>contextStart<span class="token punctuation">,</span> contextEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">endingEllipsis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>suffixLength <span class="token operator">&gt;</span> contextLength <span class="token operator">?</span> ELLIPSIS <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\uCF54\uB4DC\uB97C \uC8FC\uC758 \uAE4A\uAC8C \uC0B4\uD3B4\uBCF4\uBA74 \uCD08\uBC18\uC5D0 \uB0B4\uB838\uB358 \uACB0\uC815\uC744 \uC77C\uBD80 \uBC88\uBCF5\uD588\uB2E4\uB294 \uC0AC\uC2E4\uC744 \uC54C \uC218 \uC788\uB2E4. \uC608\uB97C \uB4E4\uBA74 \uCC98\uC74C \uCD94\uCD9C\uD588\uB5A4 \uBA54\uC11C\uB4DC \uBA87\uAC1C\uB97C \uB2E4\uC2DC formatCompactedComparison\uC5D0\uB2E4 \uB3C4\uB85C \uC9D1\uC5B4\uB123\uC5C8\uB2E4. \uB610\uD55C shouldNotBeCompacted \uC870\uAC74\uB3C4 \uC6D0\uB798\uB300\uB85C \uB418\uB3CC\uB838\uB2E4. \uCF54\uB4DC\uB97C \uB9AC\uD329\uD130\uB9C1 \uD558\uB2E4 \uBCF4\uBA74 \uD754\uD788 \uC6D0\uB798 \uD588\uB358 \uBCC0\uACBD\uC744 \uB418\uB3CC\uB9AC\uB294 \uACBD\uC6B0\uAC00 \uD754\uD558\uB2E4. \uB9AC\uD329\uD130\uB9C1\uC740 \uCF54\uB4DC\uAC00 \uC5B4\uB290 \uC218\uC900\uC5D0 \uC774\uB97C \uB54C\uAE4C\uC9C0 \uC218\uB9CE\uC740 \uC2DC\uD589\uCC29\uC624\uB97C \uBC18\uBCF5\uD558\uB294 \uC791\uC5C5\uC774\uAE30 \uB54C\uBB38\uC774\uB2E4.</p>`,41),c=[o];function e(u,l,k,i,r,f){return a(),s("div",null,c)}var x=n(p,[["render",e]]);export{m as __pageData,x as default};
